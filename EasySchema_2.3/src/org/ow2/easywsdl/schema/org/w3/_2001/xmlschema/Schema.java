//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-792 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.09.23 at 09:27:55 AM CEST 
//


package org.ow2.easywsdl.schema.org.w3._2001.xmlschema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Copyable;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.CopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBCopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.w3.org/2001/XMLSchema}openAttrs">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element ref="{http://www.w3.org/2001/XMLSchema}include"/>
 *           &lt;element ref="{http://www.w3.org/2001/XMLSchema}import"/>
 *           &lt;element ref="{http://www.w3.org/2001/XMLSchema}redefine"/>
 *           &lt;element ref="{http://www.w3.org/2001/XMLSchema}annotation"/>
 *         &lt;/choice>
 *         &lt;sequence maxOccurs="unbounded" minOccurs="0">
 *           &lt;group ref="{http://www.w3.org/2001/XMLSchema}schemaTop"/>
 *         &lt;/sequence>
 *       &lt;/sequence>
 *       &lt;attribute name="targetNamespace" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="finalDefault" type="{http://www.w3.org/2001/XMLSchema}fullDerivationSet" default="" />
 *       &lt;attribute name="blockDefault" type="{http://www.w3.org/2001/XMLSchema}blockSet" default="" />
 *       &lt;attribute name="attributeFormDefault" type="{http://www.w3.org/2001/XMLSchema}formChoice" default="unqualified" />
 *       &lt;attribute name="elementFormDefault" type="{http://www.w3.org/2001/XMLSchema}formChoice" default="unqualified" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;attribute ref="{http://www.w3.org/XML/1998/namespace}lang"/>
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "includeOrImportOrRedefine",
    "simpleTypeOrComplexTypeOrGroup"
})
@XmlRootElement(name = "schema")
public class Schema
    extends OpenAttrs
    implements CopyTo, Copyable, Equals, HashCode, ToString
{

    @XmlElements({
        @XmlElement(name = "include", type = Include.class),
        @XmlElement(name = "annotation", type = Annotation.class),
        @XmlElement(name = "import", type = Import.class),
        @XmlElement(name = "redefine", type = Redefine.class)
    })
    protected List<OpenAttrs> includeOrImportOrRedefine;
    @XmlElements({
        @XmlElement(name = "simpleType", type = TopLevelSimpleType.class),
        @XmlElement(name = "group", type = NamedGroup.class),
        @XmlElement(name = "attributeGroup", type = NamedAttributeGroup.class),
        @XmlElement(name = "notation", type = Notation.class),
        @XmlElement(name = "attribute", type = TopLevelAttribute.class),
        @XmlElement(name = "complexType", type = TopLevelComplexType.class),
        @XmlElement(name = "element", type = TopLevelElement.class)
    })
    protected List<Annotated> simpleTypeOrComplexTypeOrGroup;
    @XmlAttribute
    @XmlSchemaType(name = "anyURI")
    protected String targetNamespace;
    @XmlAttribute
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String version;
    @XmlAttribute
    @XmlSchemaType(name = "fullDerivationSet")
    protected List<String> finalDefault;
    @XmlAttribute
    @XmlSchemaType(name = "blockSet")
    protected List<String> blockDefault;
    @XmlAttribute
    protected FormChoice attributeFormDefault;
    @XmlAttribute
    protected FormChoice elementFormDefault;
    @XmlAttribute
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAttribute(namespace = "http://www.w3.org/XML/1998/namespace")
    protected String lang;

    /**
     * Gets the value of the includeOrImportOrRedefine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the includeOrImportOrRedefine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIncludeOrImportOrRedefine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Include }
     * {@link Annotation }
     * {@link Import }
     * {@link Redefine }
     * 
     * 
     */
    public List<OpenAttrs> getIncludeOrImportOrRedefine() {
        if (includeOrImportOrRedefine == null) {
            includeOrImportOrRedefine = new ArrayList<OpenAttrs>();
        }
        return this.includeOrImportOrRedefine;
    }

    /**
     * Gets the value of the simpleTypeOrComplexTypeOrGroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the simpleTypeOrComplexTypeOrGroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSimpleTypeOrComplexTypeOrGroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TopLevelSimpleType }
     * {@link NamedGroup }
     * {@link NamedAttributeGroup }
     * {@link Notation }
     * {@link TopLevelAttribute }
     * {@link TopLevelComplexType }
     * {@link TopLevelElement }
     * 
     * 
     */
    public List<Annotated> getSimpleTypeOrComplexTypeOrGroup() {
        if (simpleTypeOrComplexTypeOrGroup == null) {
            simpleTypeOrComplexTypeOrGroup = new ArrayList<Annotated>();
        }
        return this.simpleTypeOrComplexTypeOrGroup;
    }

    /**
     * Gets the value of the targetNamespace property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTargetNamespace() {
        return targetNamespace;
    }

    /**
     * Sets the value of the targetNamespace property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTargetNamespace(String value) {
        this.targetNamespace = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVersion(String value) {
        this.version = value;
    }

    /**
     * Gets the value of the finalDefault property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the finalDefault property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFinalDefault().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getFinalDefault() {
        if (finalDefault == null) {
            finalDefault = new ArrayList<String>();
        }
        return this.finalDefault;
    }

    /**
     * Gets the value of the blockDefault property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the blockDefault property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBlockDefault().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getBlockDefault() {
        if (blockDefault == null) {
            blockDefault = new ArrayList<String>();
        }
        return this.blockDefault;
    }

    /**
     * Gets the value of the attributeFormDefault property.
     * 
     * @return
     *     possible object is
     *     {@link FormChoice }
     *     
     */
    public FormChoice getAttributeFormDefault() {
        if (attributeFormDefault == null) {
            return FormChoice.UNQUALIFIED;
        } else {
            return attributeFormDefault;
        }
    }

    /**
     * Sets the value of the attributeFormDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link FormChoice }
     *     
     */
    public void setAttributeFormDefault(FormChoice value) {
        this.attributeFormDefault = value;
    }

    /**
     * Gets the value of the elementFormDefault property.
     * 
     * @return
     *     possible object is
     *     {@link FormChoice }
     *     
     */
    public FormChoice getElementFormDefault() {
        if (elementFormDefault == null) {
            return FormChoice.UNQUALIFIED;
        } else {
            return elementFormDefault;
        }
    }

    /**
     * Sets the value of the elementFormDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link FormChoice }
     *     
     */
    public void setElementFormDefault(FormChoice value) {
        this.elementFormDefault = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the lang property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLang() {
        return lang;
    }

    /**
     * Sets the value of the lang property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLang(String value) {
        this.lang = value;
    }

    public void toString(ToStringBuilder toStringBuilder) {
        super.toString(toStringBuilder);
        {
            List<OpenAttrs> theIncludeOrImportOrRedefine;
            theIncludeOrImportOrRedefine = this.getIncludeOrImportOrRedefine();
            toStringBuilder.append("includeOrImportOrRedefine", theIncludeOrImportOrRedefine);
        }
        {
            List<Annotated> theSimpleTypeOrComplexTypeOrGroup;
            theSimpleTypeOrComplexTypeOrGroup = this.getSimpleTypeOrComplexTypeOrGroup();
            toStringBuilder.append("simpleTypeOrComplexTypeOrGroup", theSimpleTypeOrComplexTypeOrGroup);
        }
        {
            String theTargetNamespace;
            theTargetNamespace = this.getTargetNamespace();
            toStringBuilder.append("targetNamespace", theTargetNamespace);
        }
        {
            String theVersion;
            theVersion = this.getVersion();
            toStringBuilder.append("version", theVersion);
        }
        {
            List<String> theFinalDefault;
            theFinalDefault = this.getFinalDefault();
            toStringBuilder.append("finalDefault", theFinalDefault);
        }
        {
            List<String> theBlockDefault;
            theBlockDefault = this.getBlockDefault();
            toStringBuilder.append("blockDefault", theBlockDefault);
        }
        {
            FormChoice theAttributeFormDefault;
            theAttributeFormDefault = this.getAttributeFormDefault();
            toStringBuilder.append("attributeFormDefault", theAttributeFormDefault);
        }
        {
            FormChoice theElementFormDefault;
            theElementFormDefault = this.getElementFormDefault();
            toStringBuilder.append("elementFormDefault", theElementFormDefault);
        }
        {
            String theId;
            theId = this.getId();
            toStringBuilder.append("id", theId);
        }
        {
            String theLang;
            theLang = this.getLang();
            toStringBuilder.append("lang", theLang);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof Schema)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        super.equals(object, equalsBuilder);
        final Schema that = ((Schema) object);
        equalsBuilder.append(this.getIncludeOrImportOrRedefine(), that.getIncludeOrImportOrRedefine());
        equalsBuilder.append(this.getSimpleTypeOrComplexTypeOrGroup(), that.getSimpleTypeOrComplexTypeOrGroup());
        equalsBuilder.append(this.getTargetNamespace(), that.getTargetNamespace());
        equalsBuilder.append(this.getVersion(), that.getVersion());
        equalsBuilder.append(this.getFinalDefault(), that.getFinalDefault());
        equalsBuilder.append(this.getBlockDefault(), that.getBlockDefault());
        equalsBuilder.append(this.getAttributeFormDefault(), that.getAttributeFormDefault());
        equalsBuilder.append(this.getElementFormDefault(), that.getElementFormDefault());
        equalsBuilder.append(this.getId(), that.getId());
        equalsBuilder.append(this.getLang(), that.getLang());
    }

    public boolean equals(Object object) {
        if (!(object instanceof Schema)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        super.hashCode(hashCodeBuilder);
        hashCodeBuilder.append(this.getIncludeOrImportOrRedefine());
        hashCodeBuilder.append(this.getSimpleTypeOrComplexTypeOrGroup());
        hashCodeBuilder.append(this.getTargetNamespace());
        hashCodeBuilder.append(this.getVersion());
        hashCodeBuilder.append(this.getFinalDefault());
        hashCodeBuilder.append(this.getBlockDefault());
        hashCodeBuilder.append(this.getAttributeFormDefault());
        hashCodeBuilder.append(this.getElementFormDefault());
        hashCodeBuilder.append(this.getId());
        hashCodeBuilder.append(this.getLang());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public Object copyTo(Object target, CopyBuilder copyBuilder) {
        final Schema copy = ((target == null)?((Schema) createCopy()):((Schema) target));
        super.copyTo(copy, copyBuilder);
        {
            List<OpenAttrs> sourceIncludeOrImportOrRedefine;
            sourceIncludeOrImportOrRedefine = this.getIncludeOrImportOrRedefine();
            List<OpenAttrs> copyIncludeOrImportOrRedefine = ((List<OpenAttrs> ) copyBuilder.copy(sourceIncludeOrImportOrRedefine));
            copy.includeOrImportOrRedefine = null;
            List<OpenAttrs> uniqueIncludeOrImportOrRedefinel = copy.getIncludeOrImportOrRedefine();
            uniqueIncludeOrImportOrRedefinel.addAll(copyIncludeOrImportOrRedefine);
        }
        {
            List<Annotated> sourceSimpleTypeOrComplexTypeOrGroup;
            sourceSimpleTypeOrComplexTypeOrGroup = this.getSimpleTypeOrComplexTypeOrGroup();
            List<Annotated> copySimpleTypeOrComplexTypeOrGroup = ((List<Annotated> ) copyBuilder.copy(sourceSimpleTypeOrComplexTypeOrGroup));
            copy.simpleTypeOrComplexTypeOrGroup = null;
            List<Annotated> uniqueSimpleTypeOrComplexTypeOrGroupl = copy.getSimpleTypeOrComplexTypeOrGroup();
            uniqueSimpleTypeOrComplexTypeOrGroupl.addAll(copySimpleTypeOrComplexTypeOrGroup);
        }
        {
            String sourceTargetNamespace;
            sourceTargetNamespace = this.getTargetNamespace();
            String copyTargetNamespace = ((String) copyBuilder.copy(sourceTargetNamespace));
            copy.setTargetNamespace(copyTargetNamespace);
        }
        {
            String sourceVersion;
            sourceVersion = this.getVersion();
            String copyVersion = ((String) copyBuilder.copy(sourceVersion));
            copy.setVersion(copyVersion);
        }
        {
            List<String> sourceFinalDefault;
            sourceFinalDefault = this.getFinalDefault();
            List<String> copyFinalDefault = ((List<String> ) copyBuilder.copy(sourceFinalDefault));
            copy.finalDefault = null;
            List<String> uniqueFinalDefaultl = copy.getFinalDefault();
            uniqueFinalDefaultl.addAll(copyFinalDefault);
        }
        {
            List<String> sourceBlockDefault;
            sourceBlockDefault = this.getBlockDefault();
            List<String> copyBlockDefault = ((List<String> ) copyBuilder.copy(sourceBlockDefault));
            copy.blockDefault = null;
            List<String> uniqueBlockDefaultl = copy.getBlockDefault();
            uniqueBlockDefaultl.addAll(copyBlockDefault);
        }
        {
            FormChoice sourceAttributeFormDefault;
            sourceAttributeFormDefault = this.getAttributeFormDefault();
            FormChoice copyAttributeFormDefault = ((FormChoice) copyBuilder.copy(sourceAttributeFormDefault));
            copy.setAttributeFormDefault(copyAttributeFormDefault);
        }
        {
            FormChoice sourceElementFormDefault;
            sourceElementFormDefault = this.getElementFormDefault();
            FormChoice copyElementFormDefault = ((FormChoice) copyBuilder.copy(sourceElementFormDefault));
            copy.setElementFormDefault(copyElementFormDefault);
        }
        {
            String sourceId;
            sourceId = this.getId();
            String copyId = ((String) copyBuilder.copy(sourceId));
            copy.setId(copyId);
        }
        {
            String sourceLang;
            sourceLang = this.getLang();
            String copyLang = ((String) copyBuilder.copy(sourceLang));
            copy.setLang(copyLang);
        }
        return copy;
    }

    public Object copyTo(Object target) {
        final CopyBuilder copyBuilder = new JAXBCopyBuilder();
        return copyTo(target, copyBuilder);
    }

    public Object createCopy() {
        return new Schema();
    }

}
