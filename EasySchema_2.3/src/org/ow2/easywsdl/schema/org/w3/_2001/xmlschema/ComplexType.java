//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-792 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.09.23 at 09:27:55 AM CEST 
//


package org.ow2.easywsdl.schema.org.w3._2001.xmlschema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Copyable;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.CopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBCopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for complexType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="complexType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.w3.org/2001/XMLSchema}annotated">
 *       &lt;group ref="{http://www.w3.org/2001/XMLSchema}complexTypeModel"/>
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}NCName" />
 *       &lt;attribute name="mixed" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="abstract" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="final" type="{http://www.w3.org/2001/XMLSchema}derivationSet" />
 *       &lt;attribute name="block" type="{http://www.w3.org/2001/XMLSchema}derivationSet" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "complexType", propOrder = {
    "simpleContent",
    "complexContent",
    "group",
    "all",
    "choice",
    "sequence",
    "attributeOrAttributeGroup",
    "anyAttribute"
})
@XmlSeeAlso({
    TopLevelComplexType.class,
    LocalComplexType.class
})
public abstract class ComplexType
    extends Annotated
    implements CopyTo, Copyable, Equals, HashCode, ToString
{

    protected SimpleContent simpleContent;
    protected ComplexContent complexContent;
    protected GroupRef group;
    protected All all;
    protected ExplicitGroup choice;
    protected ExplicitGroup sequence;
    @XmlElements({
        @XmlElement(name = "attributeGroup", type = AttributeGroupRef.class),
        @XmlElement(name = "attribute", type = Attribute.class)
    })
    protected List<Annotated> attributeOrAttributeGroup;
    protected Wildcard anyAttribute;
    @XmlAttribute
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NCName")
    protected String name;
    @XmlAttribute
    protected Boolean mixed;
    @XmlAttribute(name = "abstract")
    protected Boolean _abstract;
    @XmlAttribute(name = "final")
    @XmlSchemaType(name = "derivationSet")
    protected List<String> _final;
    @XmlAttribute
    @XmlSchemaType(name = "derivationSet")
    protected List<String> block;

    /**
     * Gets the value of the simpleContent property.
     * 
     * @return
     *     possible object is
     *     {@link SimpleContent }
     *     
     */
    public SimpleContent getSimpleContent() {
        return simpleContent;
    }

    /**
     * Sets the value of the simpleContent property.
     * 
     * @param value
     *     allowed object is
     *     {@link SimpleContent }
     *     
     */
    public void setSimpleContent(SimpleContent value) {
        this.simpleContent = value;
    }

    /**
     * Gets the value of the complexContent property.
     * 
     * @return
     *     possible object is
     *     {@link ComplexContent }
     *     
     */
    public ComplexContent getComplexContent() {
        return complexContent;
    }

    /**
     * Sets the value of the complexContent property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComplexContent }
     *     
     */
    public void setComplexContent(ComplexContent value) {
        this.complexContent = value;
    }

    /**
     * Gets the value of the group property.
     * 
     * @return
     *     possible object is
     *     {@link GroupRef }
     *     
     */
    public GroupRef getGroup() {
        return group;
    }

    /**
     * Sets the value of the group property.
     * 
     * @param value
     *     allowed object is
     *     {@link GroupRef }
     *     
     */
    public void setGroup(GroupRef value) {
        this.group = value;
    }

    /**
     * Gets the value of the all property.
     * 
     * @return
     *     possible object is
     *     {@link All }
     *     
     */
    public All getAll() {
        return all;
    }

    /**
     * Sets the value of the all property.
     * 
     * @param value
     *     allowed object is
     *     {@link All }
     *     
     */
    public void setAll(All value) {
        this.all = value;
    }

    /**
     * Gets the value of the choice property.
     * 
     * @return
     *     possible object is
     *     {@link ExplicitGroup }
     *     
     */
    public ExplicitGroup getChoice() {
        return choice;
    }

    /**
     * Sets the value of the choice property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExplicitGroup }
     *     
     */
    public void setChoice(ExplicitGroup value) {
        this.choice = value;
    }

    /**
     * Gets the value of the sequence property.
     * 
     * @return
     *     possible object is
     *     {@link ExplicitGroup }
     *     
     */
    public ExplicitGroup getSequence() {
        return sequence;
    }

    /**
     * Sets the value of the sequence property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExplicitGroup }
     *     
     */
    public void setSequence(ExplicitGroup value) {
        this.sequence = value;
    }

    /**
     * Gets the value of the attributeOrAttributeGroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the attributeOrAttributeGroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAttributeOrAttributeGroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AttributeGroupRef }
     * {@link Attribute }
     * 
     * 
     */
    public List<Annotated> getAttributeOrAttributeGroup() {
        if (attributeOrAttributeGroup == null) {
            attributeOrAttributeGroup = new ArrayList<Annotated>();
        }
        return this.attributeOrAttributeGroup;
    }

    /**
     * Gets the value of the anyAttribute property.
     * 
     * @return
     *     possible object is
     *     {@link Wildcard }
     *     
     */
    public Wildcard getAnyAttribute() {
        return anyAttribute;
    }

    /**
     * Sets the value of the anyAttribute property.
     * 
     * @param value
     *     allowed object is
     *     {@link Wildcard }
     *     
     */
    public void setAnyAttribute(Wildcard value) {
        this.anyAttribute = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the mixed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isMixed() {
        if (mixed == null) {
            return false;
        } else {
            return mixed;
        }
    }

    /**
     * Sets the value of the mixed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMixed(Boolean value) {
        this.mixed = value;
    }

    /**
     * Gets the value of the abstract property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isAbstract() {
        if (_abstract == null) {
            return false;
        } else {
            return _abstract;
        }
    }

    /**
     * Sets the value of the abstract property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAbstract(Boolean value) {
        this._abstract = value;
    }

    /**
     * Gets the value of the final property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the final property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFinal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getFinal() {
        if (_final == null) {
            _final = new ArrayList<String>();
        }
        return this._final;
    }

    /**
     * Gets the value of the block property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the block property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBlock().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getBlock() {
        if (block == null) {
            block = new ArrayList<String>();
        }
        return this.block;
    }

    public void toString(ToStringBuilder toStringBuilder) {
        super.toString(toStringBuilder);
        {
            SimpleContent theSimpleContent;
            theSimpleContent = this.getSimpleContent();
            toStringBuilder.append("simpleContent", theSimpleContent);
        }
        {
            ComplexContent theComplexContent;
            theComplexContent = this.getComplexContent();
            toStringBuilder.append("complexContent", theComplexContent);
        }
        {
            GroupRef theGroup;
            theGroup = this.getGroup();
            toStringBuilder.append("group", theGroup);
        }
        {
            All theAll;
            theAll = this.getAll();
            toStringBuilder.append("all", theAll);
        }
        {
            ExplicitGroup theChoice;
            theChoice = this.getChoice();
            toStringBuilder.append("choice", theChoice);
        }
        {
            ExplicitGroup theSequence;
            theSequence = this.getSequence();
            toStringBuilder.append("sequence", theSequence);
        }
        {
            List<Annotated> theAttributeOrAttributeGroup;
            theAttributeOrAttributeGroup = this.getAttributeOrAttributeGroup();
            toStringBuilder.append("attributeOrAttributeGroup", theAttributeOrAttributeGroup);
        }
        {
            Wildcard theAnyAttribute;
            theAnyAttribute = this.getAnyAttribute();
            toStringBuilder.append("anyAttribute", theAnyAttribute);
        }
        {
            String theName;
            theName = this.getName();
            toStringBuilder.append("name", theName);
        }
        {
            Boolean theMixed;
            theMixed = this.isMixed();
            toStringBuilder.append("mixed", theMixed);
        }
        {
            Boolean theAbstract;
            theAbstract = this.isAbstract();
            toStringBuilder.append("_abstract", theAbstract);
        }
        {
            List<String> theFinal;
            theFinal = this.getFinal();
            toStringBuilder.append("_final", theFinal);
        }
        {
            List<String> theBlock;
            theBlock = this.getBlock();
            toStringBuilder.append("block", theBlock);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof ComplexType)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        super.equals(object, equalsBuilder);
        final ComplexType that = ((ComplexType) object);
        equalsBuilder.append(this.getSimpleContent(), that.getSimpleContent());
        equalsBuilder.append(this.getComplexContent(), that.getComplexContent());
        equalsBuilder.append(this.getGroup(), that.getGroup());
        equalsBuilder.append(this.getAll(), that.getAll());
        equalsBuilder.append(this.getChoice(), that.getChoice());
        equalsBuilder.append(this.getSequence(), that.getSequence());
        equalsBuilder.append(this.getAttributeOrAttributeGroup(), that.getAttributeOrAttributeGroup());
        equalsBuilder.append(this.getAnyAttribute(), that.getAnyAttribute());
        equalsBuilder.append(this.getName(), that.getName());
        equalsBuilder.append(this.isMixed(), that.isMixed());
        equalsBuilder.append(this.isAbstract(), that.isAbstract());
        equalsBuilder.append(this.getFinal(), that.getFinal());
        equalsBuilder.append(this.getBlock(), that.getBlock());
    }

    public boolean equals(Object object) {
        if (!(object instanceof ComplexType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        super.hashCode(hashCodeBuilder);
        hashCodeBuilder.append(this.getSimpleContent());
        hashCodeBuilder.append(this.getComplexContent());
        hashCodeBuilder.append(this.getGroup());
        hashCodeBuilder.append(this.getAll());
        hashCodeBuilder.append(this.getChoice());
        hashCodeBuilder.append(this.getSequence());
        hashCodeBuilder.append(this.getAttributeOrAttributeGroup());
        hashCodeBuilder.append(this.getAnyAttribute());
        hashCodeBuilder.append(this.getName());
        hashCodeBuilder.append(this.isMixed());
        hashCodeBuilder.append(this.isAbstract());
        hashCodeBuilder.append(this.getFinal());
        hashCodeBuilder.append(this.getBlock());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public Object copyTo(Object target, CopyBuilder copyBuilder) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        final ComplexType copy = ((ComplexType) target);
        super.copyTo(copy, copyBuilder);
        {
            SimpleContent sourceSimpleContent;
            sourceSimpleContent = this.getSimpleContent();
            SimpleContent copySimpleContent = ((SimpleContent) copyBuilder.copy(sourceSimpleContent));
            copy.setSimpleContent(copySimpleContent);
        }
        {
            ComplexContent sourceComplexContent;
            sourceComplexContent = this.getComplexContent();
            ComplexContent copyComplexContent = ((ComplexContent) copyBuilder.copy(sourceComplexContent));
            copy.setComplexContent(copyComplexContent);
        }
        {
            GroupRef sourceGroup;
            sourceGroup = this.getGroup();
            GroupRef copyGroup = ((GroupRef) copyBuilder.copy(sourceGroup));
            copy.setGroup(copyGroup);
        }
        {
            All sourceAll;
            sourceAll = this.getAll();
            All copyAll = ((All) copyBuilder.copy(sourceAll));
            copy.setAll(copyAll);
        }
        {
            ExplicitGroup sourceChoice;
            sourceChoice = this.getChoice();
            ExplicitGroup copyChoice = ((ExplicitGroup) copyBuilder.copy(sourceChoice));
            copy.setChoice(copyChoice);
        }
        {
            ExplicitGroup sourceSequence;
            sourceSequence = this.getSequence();
            ExplicitGroup copySequence = ((ExplicitGroup) copyBuilder.copy(sourceSequence));
            copy.setSequence(copySequence);
        }
        {
            List<Annotated> sourceAttributeOrAttributeGroup;
            sourceAttributeOrAttributeGroup = this.getAttributeOrAttributeGroup();
            List<Annotated> copyAttributeOrAttributeGroup = ((List<Annotated> ) copyBuilder.copy(sourceAttributeOrAttributeGroup));
            copy.attributeOrAttributeGroup = null;
            List<Annotated> uniqueAttributeOrAttributeGroupl = copy.getAttributeOrAttributeGroup();
            uniqueAttributeOrAttributeGroupl.addAll(copyAttributeOrAttributeGroup);
        }
        {
            Wildcard sourceAnyAttribute;
            sourceAnyAttribute = this.getAnyAttribute();
            Wildcard copyAnyAttribute = ((Wildcard) copyBuilder.copy(sourceAnyAttribute));
            copy.setAnyAttribute(copyAnyAttribute);
        }
        {
            String sourceName;
            sourceName = this.getName();
            String copyName = ((String) copyBuilder.copy(sourceName));
            copy.setName(copyName);
        }
        {
            Boolean sourceMixed;
            sourceMixed = this.isMixed();
            Boolean copyMixed = ((Boolean) copyBuilder.copy(sourceMixed));
            copy.setMixed(copyMixed);
        }
        {
            Boolean sourceAbstract;
            sourceAbstract = this.isAbstract();
            Boolean copyAbstract = ((Boolean) copyBuilder.copy(sourceAbstract));
            copy.setAbstract(copyAbstract);
        }
        {
            List<String> sourceFinal;
            sourceFinal = this.getFinal();
            List<String> copyFinal = ((List<String> ) copyBuilder.copy(sourceFinal));
            copy._final = null;
            List<String> uniqueFinall = copy.getFinal();
            uniqueFinall.addAll(copyFinal);
        }
        {
            List<String> sourceBlock;
            sourceBlock = this.getBlock();
            List<String> copyBlock = ((List<String> ) copyBuilder.copy(sourceBlock));
            copy.block = null;
            List<String> uniqueBlockl = copy.getBlock();
            uniqueBlockl.addAll(copyBlock);
        }
        return copy;
    }

    public Object copyTo(Object target) {
        final CopyBuilder copyBuilder = new JAXBCopyBuilder();
        return copyTo(target, copyBuilder);
    }

}
